import java.lang.*;
import java.util.*;

/*Devorah Sachs, Assignment 4:
This assignment consists of a main and four other classes. The purpose of the
program is to create an object that is both an InternetUser (base class)
and a Communicator (derived class), with name, IP address, and encryption keys.
 */

//This class was supplied by the instructor to create the type for the keys.
//Other comments here are from the instructor.
class IntPair
{
   public long firstInt;
   public long secondInt;

   // constructors
   IntPair() { firstInt = secondInt = 0; }
   IntPair(long frst, long scnd) { firstInt = frst;  secondInt = scnd; }
   
   public String toString()
   {  
      return "(" + firstInt + ", " + secondInt + ")";
   }
};


//This class was supplied by instructor to help with the computation of 
//some of the members of the Communicator class.
//Other comments here are from the instructor.
//EncryptionSupport contains only static methods for client use.
class EncryptionSupport
{
   static private Random randObject = new Random(System.currentTimeMillis());
   
   public static boolean isPrime(long x)
   {
      long k, loopLim;

      if (x < 2)
         return false;
      if (x < 4)
         return true;
      if (x % 2 == 0 || x % 3 == 0)
         return false;

      // now use the fact the all primes of form 6k +/- 1
      loopLim = (long)Math.sqrt(x);
      for (k = 5; k <= loopLim; k += 6)
      {
         if (x % k == 0 || x % (k + 2) == 0)
            return false;
      }
      return true;
   }
   
   public static long inverseModN(long a, long n)
   {
      // uses extended euclidean algorithm giving as + nt = gcd(n, a), 
      // with gcd(n, a) = 1,  and s, t discovered.  s = 1/a, and t ignored

      long s, t, r, sPrev, tPrev, rPrev, temp, q, inverse;

      // special key encryption conditions;  we will pick some prime e >= 3 for a
      if (a < 3 || a >= n || !isPrime(a))
         return 0;  // error
      // we are now guaranteed 3 <= a < n and gcd(a, n) = 1;
      // initialize working variables
      s = 0;         t = 1;         r = n;
      sPrev = 1;    tPrev = 0;    rPrev = a;

      while (r != 0)
      {
         q = rPrev / r;

         temp = r;
         r = rPrev - q * r;
         rPrev = temp;

         temp = s;
         s = sPrev - q * s;
         sPrev = temp;

         temp = t;
         t = tPrev - q * t;
         tPrev = temp;
      }

      inverse = sPrev % n;
      if (inverse < 0)
         inverse += n;
      return inverse;
   }
   
   public static long getSmallRandomPrime()
   {
      int index;
      long lowPrimes[] =
      {
               19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
               71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
               127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
               179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
               233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
               283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
               353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
               419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
               467, 479, 487, 491, 499, 503, 509, 521, 523, 541
      };
      long arraySize = lowPrimes.length;

      // pick prime in the above array bet 0 and arraySize - 1
      index = (int)( randObject.nextDouble() * arraySize );

      return lowPrimes[index]; 
   }
   
   public static long getMedSizedRandomPrime()
   {
      int index;
      long medPrimes[] =
      {
            541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
            613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,
            683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
            769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,
            857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
            941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
            1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,
            1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153,
            1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223,
      };
      long arraySize = medPrimes.length;

      // pick prime in the above array bet 0 and arraySize - 1
      index = (int)(randObject.nextDouble() * arraySize );

      return medPrimes[index]; 
   }
}
//contains main method. Tests both InternetUser and Communiator classes.
public class Foothill
{
   public static void main(String[] args)
   {
      //phase 1 - tests InternetUser constructors, accessors, mutators
      InternetUser user1, user2, user3, user4, user5;
      String nameStr, ipStr;
      nameStr = "Webster"; ipStr = "12.34.56.78";
      
      user1 = new InternetUser();      
      user2 = new InternetUser("sal", "1.1.1.1");
      user3 = new InternetUser();
      user3.setName(nameStr);
      user3.setIp("23.89.245.176");
      
      System.out.println("Base Class Testing-------------------------------");
      System.out.println("\nConstructor testing, default and legal values:");
      System.out.println(user1.toString());
      System.out.println(user2.toString());
      System.out.println(user3.toString());
      
      System.out.println("\nAccessor testing; Constructor testing, "
            + "legal and illegal values:");
      user4 = new InternetUser(user3.getName() + "II", "1.2.4");
      user5 = new InternetUser("f", "22.25.23.24");
      System.out.println(user4.toString());
      System.out.println(user5.toString());
      
      user4.setIp(ipStr);
      user5.setName("y");
      System.out.println("\nMutator testing, legal and illegal values:");
      System.out.println(user4.toString());
      System.out.println(user5.toString());
      
     //phase 2 - tests Communicator constructors, accessors, mutators
      System.out.println("Derived Class Constructor Testing------------------");
      Communicator comm1, comm2, comm3, comm4, comm5;
      comm1 = new Communicator();
      comm2 = new Communicator("Sally", "1.1.1");
      comm3 = new Communicator(EncryptionSupport.getMedSizedRandomPrime(),
            EncryptionSupport.getMedSizedRandomPrime());
      comm4 = new Communicator("Donald Duck", "54.54.54.54",
            EncryptionSupport.getMedSizedRandomPrime(), 
            EncryptionSupport.getMedSizedRandomPrime());
      comm5 = new Communicator("John Doe", "45.56.67.45", 1234, 5476);
      
      System.out.println(comm1.toString() + "\n\n");
      System.out.println(comm2.toString() + "\n\n");
      System.out.println(comm3.toString() + "\n\n");
      System.out.println(comm4.toString() + "\n\n");
      System.out.println(comm5.toString() + "\n\n");
      
      comm5.setPrimesAndKeys(EncryptionSupport.getMedSizedRandomPrime(), 
            EncryptionSupport.getMedSizedRandomPrime());
      System.out.println("Mutator Testing----------------------------------");
      System.out.println(comm5.toString() + "\n\n");
      System.out.println("Accessor Testing---------------------------------");
      System.out.println("Donald Duck's public key: " + comm4.getPublicKey());
      System.out.println("Sally's private key: " + comm2.getPrivateKey());
      
   }
}
//Creates an object with name and IP address. Methods include, among others,
//toString() for proper formatting in output, validators to test length of
//name and IP, accessors, etc. Base class for Communicator class.
class InternetUser
{
   public static final int MAX_NAME_LENGTH = 50;
   public static final int MIN_NAME_LENGTH = 2;
   public static final String DEFAULT_NAME = "(undefined)";
   public static final int MAX_IP_LENGTH = 15;
   public static final int MIN_IP_LENGTH = 7;
   public static final String DEFAULT_IP = "0.0.0.0";
   
   private String name;
   private String ip;
   
   public InternetUser(String inName, String inIp)
   {
      if(!setName(inName))
         name = DEFAULT_NAME;
      if(!setIp(inIp))
         ip = DEFAULT_IP;
   }
   
   public InternetUser()
   {
      this(DEFAULT_NAME, DEFAULT_IP);
   }
   
   public boolean setName(String inName)
   {
      if (isValidName(inName))
      {
         name = inName;
         return true;
      }
      else
         return false;         
   }
   
   public boolean setIp (String inIp)
   {
    if (isValidIp(inIp))
    {
       ip = inIp;
       return true;
    }
    else
       return false;
   }
   
   public String getName()
   {
      return name;
   }
   
   public String getIp()
   {
      return ip;
   }
   
   public String toString()
   {
      String retStr;
      retStr = "Name: " + name + "\n"
         + "IP Aaddr: " + ip + "\n";
      
      return retStr;
   }
   
   private boolean isValidName(String nameStr)
   {
      if (nameStr.length() < MIN_NAME_LENGTH || nameStr.length() > MAX_NAME_LENGTH)
         return false;
      else
         return true;
   }
   
   private boolean isValidIp(String ipStr)
   {
      if (ipStr.length() >= MIN_IP_LENGTH && ipStr.length() <= MAX_IP_LENGTH)
         return true;
      else
         return false;
   }
}
//Derived from InternetUser class. Creates an object with name, IP address,
//as well as public and private encryption keys. Includes mathematical helper
//members as well. Methods include, among others, a method that computes the 
//encryption keys, a mutator that extensively sanitizes client values,
//a toString for output, etc.
class Communicator extends InternetUser
{
  public static final long ERROR_FLAG_NUM = 0;
  private static final int MAX_PQ = (int)Math.sqrt(Long.MAX_VALUE);
  
  private IntPair publicKey;
  private IntPair privateKey;
  private long firstPrime;
  private long secondPrime;
  private long n, phi, e, d;
  
  public Communicator(String name, String ip, long firstPrime, long secondPrime)
  {
     super(name, ip);
     if(!setPrimesAndKeys(firstPrime, secondPrime))
     {
        firstPrime = secondPrime = ERROR_FLAG_NUM;
        publicKey = new IntPair(ERROR_FLAG_NUM, ERROR_FLAG_NUM);
        privateKey = new IntPair(ERROR_FLAG_NUM, ERROR_FLAG_NUM);
     }
                
  }
  
  public Communicator(long firstPrime, long secondPrime)
  {
     this(DEFAULT_NAME, DEFAULT_IP, firstPrime, secondPrime);
     
  }
  
  public Communicator(String name, String ip)
  {
     //I could not chain this constructor to the ones before it because
     //that would have had to be the first call, and I need super() as my
     //first call. (according to compiler error)
     super(name, ip);
     firstPrime = secondPrime = ERROR_FLAG_NUM;
     publicKey = new IntPair(ERROR_FLAG_NUM, ERROR_FLAG_NUM);
     privateKey = new IntPair(ERROR_FLAG_NUM, ERROR_FLAG_NUM);
     n = phi = e = d = ERROR_FLAG_NUM;
  }
  
  public Communicator()
  {
     this(DEFAULT_NAME, DEFAULT_IP, ERROR_FLAG_NUM, ERROR_FLAG_NUM);
     n = phi = e = d = ERROR_FLAG_NUM;
  }
  
  public IntPair getPublicKey()
  {
     return publicKey;
  }
  
  public IntPair getPrivateKey()
  {
     return privateKey;
  }
  
  public boolean setPrimesAndKeys(long p, long q)
  {
     if (EncryptionSupport.isPrime(p) && EncryptionSupport.isPrime(q) 
           && p != q && p < MAX_PQ && q < MAX_PQ )
     {
        firstPrime = p;
        secondPrime = q;
     }
     else
        return false;
     computeBothEncrKeys();
     return true;
  }
  
  public String toString()
  {
     String wholeStr = super.toString() +
           "\n\n(p, q) n, phi, e, d: (" + firstPrime + ", " + secondPrime
           + ") " + n + ", " + phi + ", " + e + ", " + d
           + "\npublic key " + publicKey + "\nprivate key " + privateKey
           +"\n___________________________\n\n";
     return wholeStr;
  }
  
  private boolean computeBothEncrKeys() 
  {
     n = firstPrime * secondPrime;
     phi = (firstPrime - 1)*(secondPrime - 1); 
     
     do {
        e = EncryptionSupport.getSmallRandomPrime();
     }while(e >= phi || phi % e == 0);
     
    d = EncryptionSupport.inverseModN(e, n);
    publicKey = new IntPair(e, n);
    privateKey = new IntPair(d, n);
    
    return true;
  }
  
  
}

/*---------------------------------Test Run-----------------------------------
 Base Class Testing-------------------------------

Constructor testing, default and legal values:
Name: (undefined)
IP Aaddr: 0.0.0.0

Name: sal
IP Aaddr: 1.1.1.1

Name: Webster
IP Aaddr: 23.89.245.176


Accessor testing; Constructor testing, legal and illegal values:
Name: WebsterII
IP Aaddr: 0.0.0.0

Name: (undefined)
IP Aaddr: 22.25.23.24


Mutator testing, legal and illegal values:
Name: WebsterII
IP Aaddr: 12.34.56.78

Name: (undefined)
IP Aaddr: 22.25.23.24

Derived Class Constructor Testing------------------
Name: (undefined)
IP Aaddr: 0.0.0.0


(p, q) n, phi, e, d: (0, 0) 0, 0, 0, 0
public key (0, 0)
private key (0, 0)
___________________________




Name: Sally
IP Aaddr: 0.0.0.0


(p, q) n, phi, e, d: (0, 0) 0, 0, 0, 0
public key (0, 0)
private key (0, 0)
___________________________




Name: (undefined)
IP Aaddr: 0.0.0.0


(p, q) n, phi, e, d: (541, 937) 506917, 505440, 439, 479204
public key (439, 506917)
private key (479204, 506917)
___________________________




Name: Donald Duck
IP Aaddr: 54.54.54.54


(p, q) n, phi, e, d: (811, 1187) 962657, 960660, 431, 884483
public key (431, 962657)
private key (884483, 962657)
___________________________




Name: John Doe
IP Aaddr: 45.56.67.45


(p, q) n, phi, e, d: (0, 0) 0, 0, 0, 0
public key (0, 0)
private key (0, 0)
___________________________




Mutator Testing----------------------------------
Name: John Doe
IP Aaddr: 45.56.67.45


(p, q) n, phi, e, d: (797, 971) 773887, 772120, 61, 735827
public key (61, 773887)
private key (735827, 773887)
___________________________




Accessor Testing---------------------------------
Donald Duck's public key: (431, 962657)
Sally's private key: (0, 0)

 ----------------------------------------------------------------------------*/
